generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String             @id
  role           String             @default("user")
  phoneNumber    String?
  assignedShifts ShiftAssignment[]
  availability   Availability[]
  initiatedSwaps ShiftSwapRequest[]
  createdShifts  Shift[]

  skillIds         String[]
  shiftRequests    String[]
  shiftPreferences String[]
}

model ShiftAssignment {
  userId String
  user   User   @relation(fields: [userId], references: [id])

  shiftId String
  shift   Shift  @relation(fields: [shiftId], references: [id])

  createdAt DateTime @default(now())

  // TODO: better names?
  swapRequestCurrents ShiftSwapRequest[] @relation("CurrentAssignment")
  swapRequestWanteds  ShiftSwapRequest[] @relation("WantedAssignment")

  roleId String

  @@id(name: "id", [userId, shiftId])
}

model Shift {
  id String @id @default(uuid())

  start DateTime
  end   DateTime

  assignedTo ShiftAssignment[]

  coverageRequirementId String?
  coverageRequirement   CoverageRequirement? @relation(fields: [coverageRequirementId], references: [name])

  createdById String
  createdBy   User   @relation(fields: [createdById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Availability {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  start DateTime
  end   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShiftSwapRequest {
  id String @id @default(uuid())

  createdById String
  createdBy   User   @relation(fields: [createdById], references: [id])

  currentShiftId    String
  currentUserId     String
  currentAssignment ShiftAssignment @relation("CurrentAssignment", fields: [currentShiftId, currentUserId], references: [shiftId, userId])

  wantedShiftId    String
  wantedUserId     String
  wantedAssignment ShiftAssignment @relation("WantedAssignment", fields: [wantedShiftId, wantedUserId], references: [shiftId, userId])

  status String @default("pending")

  createdAt DateTime @default(now())
}

model CoverageRequirement {
  name            String            @id
  roleRequirement RoleRequirement[]
  Shift           Shift[]
}

model RoleRequirement {
  targetEmployeeCount   Int
  priority              String
  coverageRequirementId String
  coverageRequirement   CoverageRequirement @relation(fields: [coverageRequirementId], references: [name])

  @@id([targetEmployeeCount, priority])
}
