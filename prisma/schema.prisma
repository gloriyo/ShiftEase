generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  user_id         Int                @id @default(autoincrement())
  email           String             @unique
  password_hash   String
  role_id         Int
  role            Role               @relation(fields: [role_id], references: [role_id])
  first_name      String?
  last_name       String?
  contact_number  String?
  assignedShifts  Shift[]            @relation("assignedShifts")
  managedShifts   Shift[]            @relation("managedShifts")
  availabilities  Availability[]
  initiatedSwaps  ShiftSwapRequest[] @relation("initiatorUser")
  targetSwaps     ShiftSwapRequest[] @relation("targetUser")
}

model Role {
  role_id   Int    @id @default(autoincrement())
  role_name String @unique
  users     User[]
}

model Shift {
  shift_id         Int               @id @default(autoincrement())
  start_time       DateTime
  end_time         DateTime
  assigned_user_id Int
  assignedUser     User              @relation("assignedShifts", fields: [assigned_user_id], references: [user_id])
  is_approved      Boolean           @default(false)
  manager_id       Int
  manager          User              @relation("managedShifts", fields: [manager_id], references: [user_id])
  originalShifts   ShiftSwapRequest[] @relation("originalShift")
  targetShifts     ShiftSwapRequest[] @relation("targetShift")
}

model Availability {
  availability_id Int      @id @default(autoincrement())
  user_id         Int
  user            User     @relation(fields: [user_id], references: [user_id])
  start_time      DateTime
  end_time        DateTime
  recurring       Boolean  @default(false)
}

model ShiftSwapRequest {
  swap_request_id   Int      @id @default(autoincrement())
  initiator_user_id Int
  initiatorUser     User     @relation("initiatorUser", fields: [initiator_user_id], references: [user_id])
  target_user_id    Int
  targetUser        User     @relation("targetUser", fields: [target_user_id], references: [user_id])
  original_shift_id Int
  originalShift     Shift    @relation("originalShift", fields: [original_shift_id], references: [shift_id])
  target_shift_id   Int
  targetShift       Shift    @relation("targetShift", fields: [target_shift_id], references: [shift_id])
  status            String   @default("pending")
  request_date      DateTime @default(now())
}
